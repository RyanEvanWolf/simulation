#!/usr/bin/env python


# import math
# import time

# import pickle

# import cv2
# import numpy as np
# import rospy
# from cv_bridge import CvBridge

# from dataset.simulation import *
# from bumblebee.baseTypes import *
# from bumblebee.stereo import stereoCamera
# from bumblebee.utils import createDir
# from bumblebee.drawing import *



from bumblebee.motion import *

from simulation.path import *
from simulation.settings import *
import tf.transformations
from geometry_msgs.msg import TransformStamped,Transform,Quaternion,Vector3

import pickle
import os
import rospy

import time
mset=MotionCategorySettings()

####gen slow straight 



nMotions=1

totalSeconds=10

fps=1/15.0

nFrames=int(totalSeconds/fps)

#nFrames=15

rospy.init_node("nd")


motions=genStraightTransform(mset["Medium"],nFrames)

print(len(motions))

for n in range(0,len(motions)):
    fileName="/media/ryan/EXTRA/Simulation/Motion/"+str(n).zfill(4)+".p"
    with open(fileName, 'wb') as infile:
        pickle.dump(motions[n],infile)


# ###########
# ###display Path

# transforms=[]

# br = tf.TransformBroadcaster()


# origin=TransformStamped()
# origin.header.frame_id="world"
# origin.child_frame_id="origin"
# origin.transform.rotation.w=1
# transforms.append(origin)


# for i in range(0,len(motions)):
#     cvTransformMsg=TransformStamped()
#     cvTransformMsg.header.frame_id=transforms[-1].child_frame_id
#     cvTransformMsg.child_frame_id=str(i).zfill(4)
#     cvTransformMsg.transform.translation.x=motions[i][1][0,0]
#     cvTransformMsg.transform.translation.y=motions[i][1][1,0]
#     cvTransformMsg.transform.translation.z=motions[i][1][2,0]


#     # q=quaternion_from_euler(radians(0),
#     #                                 radians(0),
#     #                                 radians(0))#Rtheta[2]),'szxy')

#     cvTransformMsg.transform.rotation.x=motions[i][0][0]
#     cvTransformMsg.transform.rotation.y=motions[i][0][1]
#     cvTransformMsg.transform.rotation.z=motions[i][0][2]
#     cvTransformMsg.transform.rotation.w=motions[i][0][3]
#     transforms.append(cvTransformMsg)

# while(True):
#     for i in transforms:
#         i.header.stamp=rospy.Time.now()
#         br.sendTransformMessage(i)
#     time.sleep(0.01)


