#!/usr/bin/env python




from bumblebee.motion import *

from simulation.path import *
from simulation.settings import *
import tf.transformations
from geometry_msgs.msg import TransformStamped,Transform,Quaternion,Vector3
from bumblebee.baseTypes import basicGraph
from simulation.dataset import stereo_simulator_node
import pickle
import os
import rospy

import time
import scipy.stats.mstats as stat
from scipy.stats import norm,cauchy
import matplotlib.pyplot as plt
import matplotlib.style as sty
from mpl_toolkits.mplot3d import Axes3D
sty.use("seaborn")
import matplotlib.patches as mpatches
import matplotlib as mpl
label_size = 18
mpl.rcParams['xtick.labelsize'] = label_size 
mpl.rcParams['ytick.labelsize'] = label_size 
gFitColor=[(0,1,0,0.4),
            (0,0,1,.4),
            (0.5,0,.5,0.4),
            (1,0,0,0.4)]
gNames=["0.05","0.1","0.2","0.3"]

rootFolder="/media/ryan/EXTRA/Simulation/400"

setFiles=os.listdir(rootFolder)


rootFolder="/media/ryan/EXTRA/Simulation"
outFolder="/media/ryan/EXTRA/outSim"

nTracks=os.listdir(rootFolder)

graphData={}

def drawFolderData(fig,nTracks):
    print(nTracks)
    data={}
    setFiles=sorted(os.listdir(rootFolder+"/"+nTracks))
    print(setFiles)
    inliers=[]
    rms=[]
    count=0
    for f in setFiles:
        allFiles=rootFolder+"/"+nTracks+"/"+f
        with open(allFiles,"r") as fread:
            inData=pickle.load(fread)
            if(f[f.rindex("."):]==".simulation"):
                pass
            else:
                fig.scatter(inData.getInlierMotion(),inData.getInlierRMS(),color=gFitColor[count])
                fig.set_xlim(0,int(nTracks))
                fig.set_yticks([0.25,0.5,0.75,1])
                fig.set_ylim(0,1)
                count+=1
    fig.grid(color=(0,0,0,0.4))
fig, ax=plt.subplots(2,2,sharey=True)
names=[['50','100'],['200','400']]

for row in [0,1]:
    for col in [0,1]:
        drawFolderData(ax[row,col],names[row][col])

ax[0,0].set_xticks([0,12,24,36,48])
ax[1,0].set_xticks([0,50,100,150,200])
ax[0,1].set_xticks([0,25,50,75,100])
ax[1,1].set_xticks([0,100,200,300,400])

fig.savefig(outFolder+"/inliers.png",bbox_inches='tight',dpi=150)
plt.show()
# ###Get inliers RMS per frame
# fig ,ax1=plt.subplots(1,1)
# nInliers=[]
# nRMS=[]
# for f in setFiles:
#     allFiles=rootFolder+"/"+f
#     if(f[f.rindex("."):]==".gauss"):
#         print(allFiles)
#         with open(allFiles,"r") as fread:
#             inData=pickle.load(fread)
#             nInliers.append(inData.getInlierMotion())
#             nRMS.append(inData.getInlierRMS())

# for g in range(len(nInliers)):
#     ax1.scatter(nInliers[g],nRMS[g],label=gNames[g],color=gCOlor[g])
# fig.suptitle("$T_{track}=400$")
# ax1.set_xlabel("Total Inlier Detections")
# ax1.set_ylabel("Average Inlier Landmark RMS Error")
# ax1.legend()

# fig.savefig("/home/ryan/f3.png",dpi=300)


plt.show()

